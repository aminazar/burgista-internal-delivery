import { OnInit } from '@angular/core';
import { FormControl } from "@angular/forms";
import { RestService } from "../rest.service";
import { AuthService } from "../auth.service";
import { ProductModel } from "../product-form/product.model";
import { ActionEnum } from "../unit-form/actionEnum";
import { MessageService } from "../message.service";
import { Product } from "../product-form/product";
export declare class OverrideFormComponent implements OnInit {
    private restService;
    private authService;
    private messageService;
    private msg;
    autoNameCode: any;
    is_kitchen: boolean;
    branchData: any;
    isAdmin: boolean;
    productModels: ProductModel[];
    filteredProductModel: ProductModel;
    filteredNameCode: any;
    isFiltered: boolean;
    productModelCtrl: FormControl;
    productName_Code: string[];
    productNames: string[];
    productCodes: string[];
    branchList: any[];
    addIsDisable: boolean;
    updateIsDisable: boolean;
    deleteIsDisable: boolean;
    selectedIndex: number;
    hasCountingRuleError: boolean;
    selectedProduct: string;
    ae: typeof ActionEnum;
    constructor(restService: RestService, authService: AuthService, messageService: MessageService, msg: MessageService);
    ngOnInit(): void;
    private refreshDropDown();
    doClickedAction(type: ActionEnum): void;
    private add_updateOverride(isAdd);
    private deleteOverride();
    checkDisabilityStatus(): void;
    shouldAddBtnDisable(): boolean;
    shouldUpdateBtnDisable(): boolean;
    shouldDeleteBtnDisable(): boolean;
    changedTab(): void;
    loadBranchProducts(callback?: () => void): void;
    countingRuleErrorHandler(message: any): void;
    setWaiting(type: ActionEnum, isWaiting: boolean): void;
    filterProducts(val: string): string[];
    getProduct(nameCode: string): Product;
    showProductList($event: any): void;
    changeFilter(): void;
}
